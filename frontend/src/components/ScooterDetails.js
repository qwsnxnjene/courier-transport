import React, { useState } from "react";
// ... –¥—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã

// –î–æ–±–∞–≤—å —ç—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤
const typeTranslations = {
    "E-Scooter": "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç",
    "Bike": "–í–µ–ª–æ—Å–∏–ø–µ–¥",
    "E-Bike": "–≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥"
};

const randomFromArray = arr => arr[Math.floor(Math.random() * arr.length)];
const fakeAddresses = [
    '—É–ª. –õ–µ–Ω–∏–Ω–∞, 1', '–ø—Ä. –ú–∏—Ä–∞, 18', '—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 24', '—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 5'
];


const ScooterDetails = ({ vehicle, onClose }) => {
    const [bookingState, setBookingState] = useState('idle');
    const [message, setMessage] = useState('');

    if (!vehicle) {
        return null;
    }

    const type = vehicle.type || '';
    const charge = vehicle.batteryLevel !== undefined ? vehicle.batteryLevel : vehicle.charge;
    const price = vehicle.pricePerMinute || vehicle.price;
    const isFree = !vehicle.status || vehicle.status === 'free' || vehicle.status === '–°–≤–æ–±–æ–¥–µ–Ω';

    const handleBook = () => {
        setBookingState('started');
        setMessage('–ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –•–æ—Ä–æ—à–µ–π –¥–æ—Ä–æ–≥–∏ üòä');
    };

    const handleFinish = async () => {
        setMessage('–ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–µ–∑–¥–∫—É...');
        setBookingState('finished');

        // –ú–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–µ–∑–¥–∫–∏
        const id = (Date.now() + Math.floor(Math.random()*1000)).toString();
        const date = new Date().toLocaleDateString("ru-RU");
        const types = ["E-Scooter", "Bike", "E-Bike"];
        const vehicleType = typeTranslations[type] || randomFromArray(types);
        const duration = `${randomFromArray([10, 15, 20, 25])} –º–∏–Ω`;
        const distance = `${(Math.random() * 2 + 1.2).toFixed(1)} –∫–º`;
        const cost = `${randomFromArray([65, 80, 105, 110])} ‚ÇΩ`;
        const startPoint = randomFromArray(fakeAddresses);
        const endPoint = randomFromArray(fakeAddresses);


        const newRide = {
            id, date, vehicleType, duration, distance, cost, startPoint, endPoint,
        };
        const newPayment = {
            id: Date.now(),
            date: new Date().toISOString(),
            amount: cost,     // –≤—ã—á–∏—Å–ª–µ–Ω–æ –≤ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ
            duration: duration, // –≤—ã—á–∏—Å–ª–µ–Ω–æ –≤ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ
            method: "Visa *1234", // –∏–ª–∏ –¥—Ä—É–≥–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±
            vehicleType: "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç", // –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
        };
        const existing = JSON.parse(localStorage.getItem("paymentHistory") || "[]");

        localStorage.setItem("paymentHistory", JSON.stringify([newPayment, ...existing]));

        setTimeout(() => {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥–∫—É –≤ localStorage!
            const saved = localStorage.getItem("rideHistory");
            let history = saved ? JSON.parse(saved) : [];
            history = [newRide, ...history];
            localStorage.setItem("rideHistory", JSON.stringify(history));

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RideHistory
            window.dispatchEvent(new Event('update-ride-history'));

            setMessage("–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é!");
        }, 1200);
    };

    return (
        <div className="scooter-details-overlay"
             style={{
                 position: 'fixed',
                 top: 0,
                 left: 0,
                 width: '100%',
                 height: '100%',
                 backgroundColor: 'rgba(0,0,0,0.5)',
                 zIndex: 1000,
                 display: 'flex',
                 alignItems: 'center',
                 justifyContent: 'center',
             }}
        >
            <div className="scooter-details"
                 style={{
                     background: 'white',
                     padding: '20px',
                     borderRadius: '12px',
                     maxWidth: '400px',
                     width: '90%',
                     textAlign: 'center',
                     position: 'relative',
                 }}
            >
                <button
                    className="close-details"
                    onClick={onClose}
                    style={{
                        position: 'absolute',
                        top: '10px',
                        right: '10px',
                        background: 'none',
                        border: 'none',
                        fontSize: '20px',
                        fontWeight: 'bold',
                        cursor: 'pointer',
                    }}
                    aria-label="–ó–∞–∫—Ä—ã—Ç—å"
                >‚úñ</button>
                <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ</h2>
                <p>
                    <strong>–¢–∏–ø:</strong> {typeTranslations[type] || type}
                </p>
                <p>
                    <strong>–ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏:</strong> {charge}%
                </p>
                <p>
                    <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> {price} ‚ÇΩ/–º–∏–Ω
                </p>
                {/* <div style={{ margin: "16px 0" }}>
                    <AddTestRide />
                </div> */}
                {bookingState === 'idle' && isFree && (
                    <button
                        className="book-scooter"
                        onClick={handleBook}
                        style={{
                            padding: '10px 20px',
                            background: '#28a745',
                            color: 'white',
                            border: 'none',
                            borderRadius: '6px',
                            cursor: 'pointer',
                            marginTop: '10px'
                        }}
                    >
                        –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                )}
                {bookingState === 'started' && (
                    <>
                        <div style={{ color: '#28a745', fontWeight: 500, margin: '12px 0' }}>
                            {message || "–ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –•–æ—Ä–æ—à–µ–π –¥–æ—Ä–æ–≥–∏ üòä"}
                        </div>
                        <button
                            className="finish-ride"
                            onClick={handleFinish}
                            style={{
                                padding: '10px 20px',
                                background: '#007bff',
                                color: 'white',
                                border: 'none',
                                borderRadius: '6px',
                                cursor: 'pointer',
                                marginTop: '16px'
                            }}
                        >
                            –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É
                        </button>
                    </>
                )}
                {bookingState === 'finished' && (
                    <div style={{ color: '#007bff', fontWeight: 500, marginTop: '18px' }}>
                        {message || "–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"}
                        <button
                            style={{
                                marginTop: '20px',
                                padding: '10px 18px',
                                background: '#28a745',
                                color: '#fff',
                                border: 'none',
                                borderRadius: '6px',
                                cursor: 'pointer'
                            }}
                            onClick={() => {
                                setBookingState('idle');
                                setMessage('');
                            }}
                        >
                            –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                )}

            </div>
        </div>
    );
}

// –ö–∞–∫ —É —Ç–µ–±—è, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –Ω—É–∂–Ω—ã–µ typeTranslations, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
export default ScooterDetails;